{"name":"Lixinzhang.github.io/internExperience","tagline":"Intern Experience","body":"#实习经历\r\n##淘宝网\r\n<code>Date: 2011.08~2011.10</code>\r\n\r\n主要利用大三暑假的机会，到杭州淘宝实习，所在的部门为业务安全部门，TBCTU，淘宝的审核平台。\r\n\r\n实习期间，主要是java web的一些内容开发，也接触了一些数据库的开发，比如mysql之类的，了解了一些分布式数据库系统。\r\n\r\n##创新工场\r\n<code>Date: 2012.07~2012.08</code>\r\n\r\n利用升研究生期间的暑假时间，提前来北京体验北漂生活，来创新工场实习，也是为了能体验一下创业公司的工作氛围。\r\n\r\n行云，是李开复第一批孵化的项目，主要提供游戏行业的云计算服务。当时，实习所在的团队就是核心的云计算团队。主要是利用python写网络编程相关的web服务。当时对团队的贡献是完成了一套提供给PaaS用户的服务器管理平台工具。\r\n\r\n##阿里妈妈-阿里巴巴旗下广告平台\r\n<code>Date: 2013.05~2013.10</code>\r\n\r\n###云推荐\r\n原来的团队是云推荐团队，即为cnzz所服务的所有网站提供全网的网页推荐。所在的团队是offline，主要做日志处理、基础的推荐算法模型训练。\r\n\r\n主要使用了两个算法，一个基于item的协同过滤，一个是频繁对。其实现都是基于阿里云飞天平台上做的。\r\n\r\n我主要对推荐结果的过热程度以及推荐结果的变化频率做了调研工作。\r\n####推荐结果的过热程度\r\n按照不同站点的点击topN的URL作为候选集，然后统计每个acookie对应的推荐结果，在不同topN里的比例。\r\n####推荐结果的变化频率\r\n按照不同的时间段（点），统计对已每个acookie的推荐结果发生变化的概率，从而观察不同时间的变化率情况。理想的情况是，有一定的变化，但是不应该变化的太大，或者无变化。变化太大，证明模型不稳定；变化太小，表示rcc推荐的权重较小，或者模型过于稳定，多样性不足。\r\n###阿里妈妈 展示广告外投\r\n####面向广告主的推荐\r\n阿里广告这边有一种定向方式是兴趣点定向，广告主在制定广告计划的时候，会选择所投放的广告的目标人群的兴趣点。但是，兴趣点数量很多，广告主选择成本较大，于是需要给广告主进行推荐。最基础的是，我们通过该广告主的店铺以及自身的标签，所卖东西的item类目产出一些基础兴趣点。然后，根据所有买家的相关性，产出一个基于item based的协同过滤推荐结果。\r\n\r\n####兴趣点定向无召回时的多维度兴趣点扩展\r\n比如一个用户的兴趣点是：男士棉衣，但是对于这个兴趣点在一定条件下没有召回的广告，默认情况下会出通投的广告。那么，对于ctr而言，通投的广告明显不会有targeting的高。因此，我们考虑对兴趣点进行拓展，然后根据拓展的兴趣点（比如棉衣拓展为羽绒服）再去召回兴趣点。因此，需要产出一份兴趣点相似度矩阵。依然使用传统的itembased协同过滤，数据源使用钻展点击日志。另外，我们还分别从基于query的、基于购物车的数据产出了itembased的相似度矩阵。最后参与了多维度定向中兴趣点定向的lib开发。\r\n\r\n####淘宝类目到tanx类目的映射\r\n这本来是个很棘手的问题，因为淘宝类目与tanx类目本身是两套独立的体系，类目间的关系及粒度差距很大。淘宝类目有几万个，而tanx类目是全网的类目但只有几十个。人工编辑，成本太大了，必须有自动化的解决办法。当时，想到了一个办法就是利用tanx类目的描述信息，当做query去查淘宝搜索引擎的历史query，然后提取出query覆盖到的淘宝类目。这样就建立了一个简单的映射关系，但是tanx类目描述文字少，召回的query有限，于是考虑将该query扩展，再去召回，这样召回的多了，但是错误率仍然很高。于是，考虑分析类目体系，建立类目树，利用boosting的方法进行填补与改写。最后人工review一遍，达到了很好的效果。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}